// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userType   UserType  @relation(fields: [userTypeId], references: [id])
  userTypeId Int
  Post       Post[]
  Comment    Comment[]
  Answer     Answer[]
}

model UserType {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

model City {
  id         String       @id @default(uuid())
  name       String       @unique
  title      String
  text       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Post       Post[]
  CityImages CityImages[]
}

model CityImages {
  id        String   @id @default(uuid())
  content   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City     @relation(fields: [cityId], references: [id])
  cityId    String
}

model Post {
  id             String       @id @default(uuid())
  name           String
  text           String
  openDay        String
  closeDay       String
  openTime       String
  closeTime      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  city           City         @relation(fields: [cityId], references: [id])
  cityId         String
  PostStatus     PostStatus   @relation(fields: [postStatusId], references: [id])
  postStatusId   Int
  PostCategory   PostCategory @relation(fields: [postCategoryId], references: [id])
  postCategoryId Int
  Comment        Comment[]
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?
  PostImages     PostImages[]
}

model PostImages {
  id        String   @id @default(uuid())
  content   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model PostCategory {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Post        Post[]
}

model PostStatus {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Post        Post[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Answer    Answer[]
}

model Answer {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}
